//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""fe6be9f7-1b5b-445c-8b10-b07d25d179f0"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""566c89a6-4943-415d-965e-3f81f67af56e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""23828524-7f61-4d49-bf29-bc26771be050"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""302bcfbe-b38b-4856-9de0-74dcb1f3944d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon3"",
                    ""type"": ""Button"",
                    ""id"": ""f401ff7a-6125-473b-b27f-6885da124da2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c781fa0a-b73d-48be-9fb6-15f3206177bb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ca60653-6dc1-44be-bba0-44d1faef14ed"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57c0b107-d52f-4e45-a125-397836b53720"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd47a04f-cb5e-4793-bd3d-444bce40b8b7"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Shoot = m_Gameplay.FindAction("Shoot", throwIfNotFound: true);
        m_Gameplay_ChangeWeapon1 = m_Gameplay.FindAction("ChangeWeapon1", throwIfNotFound: true);
        m_Gameplay_ChangeWeapon2 = m_Gameplay.FindAction("ChangeWeapon2", throwIfNotFound: true);
        m_Gameplay_ChangeWeapon3 = m_Gameplay.FindAction("ChangeWeapon3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Shoot;
    private readonly InputAction m_Gameplay_ChangeWeapon1;
    private readonly InputAction m_Gameplay_ChangeWeapon2;
    private readonly InputAction m_Gameplay_ChangeWeapon3;
    public struct GameplayActions
    {
        private @Inputs m_Wrapper;
        public GameplayActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Gameplay_Shoot;
        public InputAction @ChangeWeapon1 => m_Wrapper.m_Gameplay_ChangeWeapon1;
        public InputAction @ChangeWeapon2 => m_Wrapper.m_Gameplay_ChangeWeapon2;
        public InputAction @ChangeWeapon3 => m_Wrapper.m_Gameplay_ChangeWeapon3;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShoot;
                @ChangeWeapon1.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon1;
                @ChangeWeapon1.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon1;
                @ChangeWeapon1.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon1;
                @ChangeWeapon2.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon2;
                @ChangeWeapon2.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon2;
                @ChangeWeapon2.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon2;
                @ChangeWeapon3.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon3;
                @ChangeWeapon3.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon3;
                @ChangeWeapon3.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnChangeWeapon3;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ChangeWeapon1.started += instance.OnChangeWeapon1;
                @ChangeWeapon1.performed += instance.OnChangeWeapon1;
                @ChangeWeapon1.canceled += instance.OnChangeWeapon1;
                @ChangeWeapon2.started += instance.OnChangeWeapon2;
                @ChangeWeapon2.performed += instance.OnChangeWeapon2;
                @ChangeWeapon2.canceled += instance.OnChangeWeapon2;
                @ChangeWeapon3.started += instance.OnChangeWeapon3;
                @ChangeWeapon3.performed += instance.OnChangeWeapon3;
                @ChangeWeapon3.canceled += instance.OnChangeWeapon3;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnChangeWeapon1(InputAction.CallbackContext context);
        void OnChangeWeapon2(InputAction.CallbackContext context);
        void OnChangeWeapon3(InputAction.CallbackContext context);
    }
}
